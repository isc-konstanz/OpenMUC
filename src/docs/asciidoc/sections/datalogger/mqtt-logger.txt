=== MQTT Logger

==== General Information

Logs OpenMUC records to a MQTT broker. Records are translated to byte messages with the configured ParserService.
The logger implements automatic connection recovery and message buffering.

[options="header"]
|===
|Option |  Description
|Event logging | not supported
|===

==== Installation

To be able to use the logger in the OpenMUC framework you need to add following dependencies to /conf/bundles.conf.gradle

*bundles.conf.gradle*

[source]
----
  osgibundles group: "org.openmuc.framework", name: "openmuc-datalogger-mqtt",               version: openmucVersion

  //add your project specific bundle here, which provides the ParserService implementation, example with OpenMUC parser:
  osgibundles group: "org.openmuc.framework", name: "openmuc-lib-parser-openmuc",            version: openmucVersion

  osgibundles group: "org.openmuc.framework", name: "openmuc-lib-ssl",                       version: openmucVersion
  osgibundles group: 'com.hivemq',            name: 'hivemq-mqtt-client',                    version: '1.1.4'
  osgibundles group: 'org.jctools',           name: 'jctools-core',                          version: '2.1.0'
  osgibundles group: 'org.reactivestreams',   name: 'reactive-streams',                      version: '1.0.3'
  osgibundles group: 'io.reactivex.rxjava2',  name: 'rxjava',                                version: '2.2.19'
  osgibundles group: 'io.netty',              name: 'netty-handler',                         version: '4.1.32.Final'
  osgibundles group: 'io.netty',              name: 'netty-buffer',                          version: '4.1.32.Final'
  osgibundles group: 'io.netty',              name: 'netty-codec',                           version: '4.1.32.Final'
  osgibundles group: 'io.netty',              name: 'netty-codec-http',                      version: '4.1.32.Final'
  osgibundles group: 'io.netty',              name: 'netty-transport',                       version: '4.1.32.Final'
  osgibundles group: 'io.netty',              name: 'netty-transport-native-epoll',          version: '4.1.32.Final'
  osgibundles group: 'io.netty',              name: 'netty-common',                          version: '4.1.32.Final'
  osgibundles group: 'io.netty',              name: 'netty-resolver',                        version: '4.1.32.Final'
  osgibundles group: 'io.netty',              name: 'netty-transport-native-unix-common',    version: '4.1.32.Final'
  osgibundles group: "com.google.code.gson",  name: "gson",                                  version: "2.8.5"

----

*config.properties*

Add following line to config.properties to provide sun.misc package

[source]
----
org.osgi.framework.system.packages.extra=sun.misc
----


==== Configuration

*system.properties*

The logger is configured by the file /conf/system.properties.
It relies on a configured Key and TrustStore when using SSL/TLS (see below).
Brokers without authentication are supported, just omit username/password.

When the parser supports serializing multiple records at once, `multiple` can be set true. Else every record is sent in a single MQTT message.

[source]
----
org.openmuc.framework.datalogger.mqtt.host = localhost
org.openmuc.framework.datalogger.mqtt.port = 1883
org.openmuc.framework.datalogger.mqtt.ssl = false
org.openmuc.framework.datalogger.mqtt.username = username
org.openmuc.framework.datalogger.mqtt.password = password
org.openmuc.framework.datalogger.mqtt.topic = my/mqtt/topic
org.openmuc.framework.datalogger.mqtt.parser = myparser
org.openmuc.framework.datalogger.mqtt.multiple = false
# file buffering: number of files to be created
org.openmuc.framework.datalogger.mqtt.maxFileCount = 2
# file buffering: file size in kB
org.openmuc.framework.datalogger.mqtt.maxFileSize = 5000
# file buffering: buffer size in kB
org.openmuc.framework.datalogger.mqtt.maxBufferSize = 1000
----


*Enable SSL communication*

To be able to verify the authenticity of the broker a valid SSL certificate of the broker needs to be added to the TrustStore.
When using 2-way SSL the broker verifies the authenticity of the logger and a valid SSL certificate needs to be added to the KeyStore.

OpenMUC ships an Key and Trust Store by default so no creation is necessary. See <<anchor-lib-ssl,SSL Library>> for more information.



