:driver_table_op: width="100%", options="header"

[[drivers]]
== Drivers

=== Modbus


Modbus Homepage: http://www.modbus.org +
Modbus Protocol Specifications: http://www.modbus.org/specs.php +
Modbus Master Simulator modpoll: http://www.modbusdriver.com/modpoll.html

The Modbus driver supports RTU, TCP and RTU over TCP.

.Configuration Synopsis
[{driver_table_op}, cols="1,1,2,1"]
|=========================================================
|| *TCP* (ethernet) | *RTU* (serial) | *RTUTCP* (serial over ethernet)
|ID 3+| modbus 
|Device Address | <ip>[:<port>] | <serial port> | <ip>[:<port>]
|Settings | <type> | <type>:<encoding>:<baudrate>:<databits>:<parity>:<stopbits>:<echo>:<flowControlIn>:<flowControlOut> | <type>
|Channel Address 3+| <UnitId>:<PrimaryTable>:<Address>:<Datatyp> 
|=========================================================

*DeviceAddress*

*For TCP and RTUTCP* +
The DeviceAddress is specified by an IP address and an optional port. If no port is specified, the driver uses the modbus default port 502.

*For RTU:* +
The DeviceAddress is specified by a serial port like /dev/ttyS0. 

NOTE: The driver uses the jamod library which itself uses the rxtx library for serial communication. Therefor the librxtx-java package needs to be installed on the system. Furthermore the user needs to be in the groups dialout and plugdev

*Settings*

.Settings
[{driver_table_op}, cols="1,4"]
|=========================================================
|Config | Description/ Values
|<type> | RTU\|TCP\|RTUTCP
|<encoding> | SERIAL_ENCODING_RTU 
|<baudrate>| Integer value: e.g.: 2400, 9600, 115200
|<databits>| DATABITS_5, DATABITS_6, DATABITS_7, DATABITS_8
|<parity>| PARITY_EVEN, PARITY_MARK, PARITY_NONE, PARITY_ODD, PARITY_SPACE
|<stopbits>| STOPBITS_1, STOPBITS_1_5, STOPBITS_2
|<echo>|ECHO_TRUE, ECHO_FALSE
|<flowControlIn>|FLOWCONTROL_NONE, FLOWCONTROL_RTSCTS_IN, FLOWCONTROL_XONXOFF_IN
|<flowControlOut>| FLOWCONTROL_NONE, FLOWCONTROL_RTSCTS_OUT, FLOWCONTROL_XONXOFF_OUT
|=========================================================

.Example Settings

[source, xml]
----
<channelAddress>
RTU:SERIAL_ENCODING_RTU:38400:DATABITS_8:PARITY_NONE:STOPBITS_1 :ECHO_FALSE:FLOWCONTROL_NONE:FLOWCONTROL_NONE
</channelAddress>
----

*ChannelAddress*

The ChannelAddress consists of four parts: UnitId, PrimaryTable, Address and Datatyp which are explained in detail in the following table.

.Parameter Description
[{driver_table_op}, cols="1,4"]
|=========================================================
| Parameter | Description
| UnitId | In homogenious architecture (when just MODBUS TCP/IP is used) +
On TCP/IP, the MODBUS server is addressed by its IP address; therefore, the MODBUS Unit Identifier is useless. The value 255 (0xFF) has to be used.

In heterogeneous architecture (when using MODBUS TCP/IP and MODBUS serial or MODBUS+) +
This field is used for routing purpose when addressing a device on a MODBUS+ or MODBUS serial line sub-network. In that case, the “Unit Identifier” carries the MODBUS slave address of the remote device. The MODBUS slave device addresses on serial line are assigned from 1 to 247 (decimal). Address 0 is used as broadcast address.

Note: Some MODBUS devices act like a bridge or a gateway and require the UnitId even if they are accessed through TCP/IP. One of those devices is the Janitza UMG. To access data from the Janitza the UnitId has to be 1.  

| PrimaryTable | PrimaryTable defines the which part of the device memory should be accessed.
Valid values: COILS, DISCRETE_INPUTS, INPUT_REGISTERS, HOLDING_REGISTERS

| Address | Address of the channel/register. Decimal integer value - not hex!

| Datatyp | Valid values:
BOOLEAN, SHORT, INT, FLOAT, DOUBLE, LONG, BYTEARRAY[n] (n = number of REGISTERS not BYTES, 1 Register = 2 Bytes!)

|=========================================================

.Primary Tables and Channel Address
image:driver_modbustcp_address.png[width={width80}, alt="Driver Modbus Address",link="../images/driver_modbustcp_address.png"]

*Valid Address Parameter Combinations*

Since COILS and DISCRETE_INPUTS are used for bit access, only the data type BOOLEAN makes sense in combinations with of one of these. INPUT_REGISTERS and HOLDING_REGISTERS are used for register access. There is also a difference between reading and writing. Only COILS and HOLDING_REGISTERS are readable and writable. DISCRETE_INPUTS and INPUT_REGISTERS are read only. The following table gives an overview of valid parameter combinations of PrimaryTable and Datatyp.

//:vcols: "^v,^v,^v,^v,^v,^v,^v,^v"

//:tableoptions: {driver_table_op}, cols={vcols}

.Valid Address Parameters for reading a channel
[{driver_table_op}, cols="^v,^v,^v,^v,^v,^v,^v,^v"]
|=========================================================
| Primary Table     | BOOLEAN | SHORT | INT | FLOAT | DOUBLE | LONG | BYTEARRAY[n]
| COILS 	    | x | - | - | - | - | - | -  
| DISCRETE_INPUTS   | x | - | - | - | - | - | -  
| INPUT_REGISTERS   | - | x | x | x | x | x | x  
| HOLDING_REGISTERS | - | x | x | x | x | x | x   
|=========================================================

.Valid Address Parameters for writing a channel
[{driver_table_op}, cols="^v,^v,^v,^v,^v,^v,^v,^v"]
|=========================================================
| Primary Table | BOOLEAN | SHORT | INT | FLOAT | DOUBLE | LONG | BYTEARRAY[n]
| COILS | x | - | - | - | - | - | -  
| DISCRETE_INPUTS | - | - | - | - | - | - | -  
| INPUT_REGISTERS | - | - | - | - | - | - | -  
| HOLDING_REGISTERS | - | x | x | x | x | x | x   
|=========================================================

.Examples for valid addresses
[source, xml]
----
<channelAddress>255:INPUT_REGISTERS:100:SHORT</channelAddress>
<channelAddress>255:COILS:412:BOOLEAN</channelAddress> 
----

.Examples for invalid addresses
[source, xml]
----
<channelAddress>255:INPUT_REGISTERS:100:BOOLEAN</channelAddress> (BOOLEAN doesn't go with INPUT_REGISTERS)
<channelAddress>255:COILS:412:LONG</channelAddress> (LONG does not go with COILS)
----

*Function Codes* (more detailed information about how the driver works)

The driver is based on the Java Modbus Library (http://jamod.sourceforge.net[jamod]) which provides read and write access via modbus.
Following table shows which modbus function code is used to access the data of the channel.

.Relation between function code and channel address
[{driver_table_op}, cols="1,1,1,1,1"]
|=========================================================
| jamod Method | Modbus Function Code | Primary Table | Access | Java Data Type
| ReadCoilsRequest | FC 1  Read Coils | Coils | RW | boolean
| ReadInputDiscretesRequest | FC 2  Read Discrete Inputs | Discrete Inputs | R | boolean
| ReadMultipleRegistersRequest | FC 3  Read Holding Registers | Holding Registers | RW | short, int, double, long, float, bytearray[]
| ReadInputRegistersRequest | FC 4  Read Input Registers | Input Registers | R | short, int, double, long, float, bytearray[]
| WriteCoilRequest | FC 5  Write Single Coil | Coils | RW | boolean
| WriteMultipleCoilsRequest | FC 15 Write Multiple Coils | Coils | RW | boolean
| WriteMultipleRegistersRequest | FC  6  Write Single Registers | Holding Registers | RW | short, int, double, long, float, bytearray[]
| WriteMultipleRegistersRequest | FC 16  Write Multiple Registers | Holding Registers | RW | short, int, double, long, float, bytearray[]
|=========================================================

*Example*

[source,xml]
----
<channelAddress>255:INPUT_REGISTERS:100:SHORT</channelAddress> will be accessed via function code 4.
----

==== Modbus TCP and Wago

NOTE: Till now the driver has been tested with some modules of the Wago 750 Series with the Fieldbus-Coupler 750-342

If you want to use the Modbus TCP driver for accessing a Wago device you first need to know how the process image is build. From the process image you can derive the register addresses of your Wago modules (AO, AI, DO, DI). You find detailed information about the process image in http://www.wago.com/wagoweb/documentation/750/eng_manu/coupler_controller/m07500342_00000000_0en.pdf[WAGO 750-342 Manual] on page 46 and 47.

The following Examples are based on figure <<wago>> +

*Example 1: Read AI 2 from first (left) 472-module (Register Address 0x0001)

[source,xml]
----
<channelAddress>255:INPUT_REGISTERS:1:SHORT</channelAddress>
----

*Example 2: Read DI 3 from first (left) 472-module (Register Address 0x0003)*

[source,xml]
----
<channelAddress>255:DISCRETE_INPUTS:3:BOOLEAN</channelAddress> 
----

*Example 3: Write AO 1 from first (left) 550-module (Register Address 0x0000/0x0200)* +

For writing only the +0x0200 addresses should be used! Since the driver accepts only a decimal channelAddress 0x0200 must be converted to decimal. The resulting address would be:

[source,xml]
----
<channelAddress>255:HOLDING_REGISTERS:512:SHORT</channelAddress>
----

*Example 4: Write DO 2 from 501-module (Register Address 0x0000/0x0201)* +
For writing only the +0x0200 addresses should be used! Since the driver accepts only a decimal channelAddress 0x0201 must be converted to decimal. The resulting address would be:

[source,xml]
----
<channelAddress>255:COILS:513:BOOLEAN</channelAddress>
----

*Example 5: Read back DO 2 from 501-module (Register Address 0x0201)*

[source,xml]
----
<channelAddress>255:COILS:513:BOOLEAN</channelAddress> or
<channelAddress>255:DISCRETE_INPUTS:513:BOOLEAN</channelAddress>
----

[[wago]]
.Wago 750-342 Process Image
image:modbus_wago_process_image.png[width={width80}, alt="Driver Modbus Wago process", link="images/modbus_wago_process_image.png"]


:config_table: {driver_table_op}, cols="1,20"

=== M-Bus (wired)

M-Bus is communication protocol to read out meters.

.Configuration Synopsis
[{driver_table_op}, cols="1,4"]
|=========================================================
|ID | mbus
|Device Address |   <serial_port>:<mbus_address>
|Settings |   [<baudrate>][:timeout]
|Channel Address |   <dib>:<vib>
|=========================================================

*Device Address*

<serial_port> - The serial port should be given that connects to the M-Bus converter. (e.g. /dev/ttyS0, /dev/ttyUSB0 on Linux).

<mbus_address> - The mbus adress can either be the the primary address or secondary address of the meter. The primary address is specified as integer (e.g. 1 for primary address 1) whereas the secondary address consits of 8 bytes that should be specified in hexadecimal form. (e.g. e30456a6b72e3e4e)

*Settings*

<baudrate> - If left empty the default is used: "2400"

<timeout> - Defines the read timeout in ms. Default is 2500 ms. Example: t5000 for timeout of 5 seconds

*Channel Address*

Shall be of the format <dib>:<vib> in a hexadecimal string format (e.g. 04:03 or 02:fd48)

=== M-Bus (wireless)

Wireless M-Bus is communication protocol to read out meters and sensors.

.Configuration Synopsis
[{driver_table_op}, cols="1,4"]
|=========================================================
|ID | wmbus
|Device Address |   <serial_port>:<secondary_address>
|Settings |  <transceiver> <mode> [<key>]
|Channel Address |   <dib>:<vib>
|=========================================================

*Device Address*

<serial_port> - The serial port used for communication. Examples are /dev/ttyS0 (Linux) or COM1 (Windows)

<secondary_address> - The secondary address consists of 8 bytes that should be specified in hexadecimal form. (e.g. e30456a6b72e3e4e)

*Settings*

<transceiver> - The transceiver being used. It can be 'amber' or 'rc' for modules from RadioCrafts.

<mode> - The wM-Bus mode can be S or T.

<key> - The key in hexadecimal form.

*Channel Address*

Shall be of the format <dib>:<vib> in a hexadecimal string format (e.g. 04:03 or 02:fd48)


=== IEC 61850

IEC 61850 is an international communication standard used mostly for 
substation automation and controlling distributed energy resources
(DER). The IEC 61850 driver uses the client library from the
OpenIEC61850 project.

[{config_table}]
[{driver_table_op}, cols="1,4"]
|=========================================================
|ID | iec61850
|Device Address | <host>[:<port>]
|Settings | [-a <authentication parameter>] [-lt <local t-selector>] [-rt <remote t-selector>]
|Channel Address | <bda reference>:<fc>
|=========================================================


*Channel Address*

The channel address should be the IEC 61850 Object Reference and the
Functional Constraint of the Basic Data Attribute that is to be
addressed separated by a colon.  Note that an IEC 61850 timestamp received will be
converted to a LongValue that represents the milliseconds since
1970. Some information is lost during this conversion because the IEC
61850 timestamp is more exact.

*Settings*

The defaults for TSelLocal and TSelRemote are "00" and "01"
respectively. You can also set either TSelector to the empty string
(e.g. "-lt -rt"). This way they will be omitted in the connection
request.


=== IEC 62056 part 21

The IEC 62056 part 21 driver can be used to read out meter via optical interface

.Configuration Synopsis
[{driver_table_op}, cols="1,4"]
|=========================================================
|ID | iec62056p21
|Device Address | <serial_port>
|Settings |  
|Channel Address | <data_set_id>
|=========================================================

*Device Address*

<serial_port> - The serial port should be given that connects to the M-Bus converter. (e.g. /dev/ttyS0, /dev/ttyUSB0 on Linux).

*Channel Address*

<data_set_id> - Id of the data set. It is usually an OBIS code of the format A-B:C.D.E*F or on older EDIS code of the format C.D.E.that specifies exactly what the value of this data set represents.


=== DLMS/COSEM

DLMS/COSEM is a international standardized protocol used mostly to communicate with smart meter devices. The DLMS/COSEM driver uses the client library developed by the jDLMS project. Currently, the DLMS/COSEM driver supports communication via HDLC and TCP/IP using Logical Name Referencing to retrieve values from the device.

*Dependencies:* rxtxcomm_api-2.1.7.jar (optional)

[{driver_table_op}, cols="1,4"]
|=========================================================
|ID | dlms
|Device Address | hdlc:<serial-port>[:<server-physical-port>]:<server-logical>:<client-logical> +
                  tcp:<server-ip>[:<server-port>]:<server-logical>:<client-logical> +

|Settings |   [SendDisconnect=<disconnect>];[UseHandshake=<handshake>];[..]
|Channel Address |   <class-id>/<reference-id>/<attribute-id>
|=========================================================

*Interface Address*

The interface address consists of all elements the driver needs to uniquely identify and address a physical smart meter and format depends on the used protocol. Refer to the following table for the format of the interface address.

[{driver_table_op},cols="1,5,5"]
|=========================================================
| Protocol | Physical-Connection | Example
| hdlc | <serial-port>[:<physical-device-id>] | hdlc:ttyUSB0 or hdlc:ttyUSB0:16
| tcp | <server-ip>[:<server-port>] | tcp:16:192.168.200.25 or tcp:16:192.168.200.25:4059
|=========================================================

*Settings*

Settings are separated by a semi-colon. The available settings are determined by the used protocol, defined as first parameter of the device address. All possible settings with a short description and default values are listed in the following table.

[{driver_table_op},cols="2,1,1,1,5"]
|=========================================================
| Options | Protocol | Values | Default | Description
| PW | all | string | | Authorization password to access the smart meter device
| SendDisconnect | all | _true/false_ | true | Send a disconnect message at DLMS layer on disconnecting from device. Set this flag to false if the remote device is expecting the disconnect message at a lower layer (like HDLC)
| UseHandshake | HDLC | _true/false_ | true | Use initial handshake to negotiate baud rate
| Baudrate | HDLC | _integer_ | | Maximum supported baud rate (0 = no maximum). If UseHandshake = false, this value will be used to communicate with the device and _has_ to be set
| ForceSingle | all | _true/false_ | false | Forces every attribute to be requested individually. This option has to be enabled to support Kamstrup 382 smart meter devices
|=========================================================

=== KNX

KNX is a standardised protocol for intelligent buildings. The KNX
driver uses KNXnet/IP to connect to the wired KNX BUS. The driver
supports group read and writes and is also able to listen to the
BUS. The driver uses the calimero library.

.Configuration Synopsis
[{driver_table_op}, cols="1,4"]
|=========================================================
|ID | knx
|Device Address | knxip://<host_ip>[:<port>] knxip://<device_ip>[:<port>]  
|Settings | [Address=<Individual KNX address (e. g. 2.6.52)>];[SerialNumber=<Serial number>]
|Channel Address |   <Group Adress>:<DPT_ID>
|=========================================================

*Device Address*

The device address consists of the host IP and the IP of the KNX tunnel or router.

*Channel Address*

The channel address consist of the group address you want to monitor and the corresponding data point ID. A data point consists of a main number and a subtype. For example a boolean would be represented by the main number 1 and a switch by the subtype 001, the DPT_ID of a switch is 1.001.


=== eHZ

OpenMUC driver for SML and IEC 62056-21

*Dependencies:* rxtxcomm_api-2.1.7.jar

.Configuration Synopsis
[{driver_table_op}, cols="1,4"]
|=========================================================
|ID | ehz
|Device Address | sml://<serialPort> or iec://<serialPort>  e.g. sml:///dev/ttyUSB0
|Settings | 
|Channel Address | <OBIScode> e.g. 10181ff (not 1-0:1.8.1*255)
|=========================================================


scanForDevices() and scanForChannels will return the specific configuration.



=== SNMP


Simple Network Management Protocol (SNMP) is an Internet-standard protocol for monitoring and management of devices on IP networks.

*Dependencies:* snmp4j-2.2.5.jar

.Configuration Synopsis
[{driver_table_op}, cols="1,4"]
|=========================================================
|ID | snmp
|Device Address | IP/snmpPort
|Settings | settings string
|Channel Address | SNMP OID address
|=========================================================

*Device Address*

IP address and available SNMP port of the target device should be provided as Device Address.

*Example for Device Address:*
----
192.168.1.1/161
----

*Settings*

All settings are stored in "SnmpDriverSettingVariableNames" enum.

.Setting Parameters
[{driver_table_op}, cols="1,2"]
|=========================================================
|SNMPVersion | "SNMPVersion" enum contains all available values 
|USERNAME| string
|SECURITYNAME|  string
|AUTHENTICATIONPASSPHRASE | is the same COMMUNITY word in SNMP V2c
|PRIVACYPASSPHRASE|   string
|=========================================================

*SNMPVersion*

SNMPVersion is an enum variable containing valid SNMP versions. (V1, V2c, V3)

*Example for valid settings string:*
----
SNMPVersion=V2c:USERNAME=public:SECURITYNAME=public:AUTHENTICATIONPASSPHRASE=password
----

In order to read specific channel, corresponding SNMP OID shall be passed.

*Example for SNMP OID:*
----
1.3.6.1.2.1.1.1.0
----


For scanning SNMP enabled devices in the network, range of IP addresses shall be provided. This functionality is implemented only for SNMP V2c.




=== Aggregator

The Aggregator which performs aggregation of logged values from a channel. It uses the DriverService and the DataAccessService. It is therefore a kind of OpenMUC driver/application mix. The aggregator is fully configurable through the channels.xml config file. 

.Configuration Synopsis
[{driver_table_op}, cols="1,4"]
|=========================================================
|ID | aggregator
|Device Address | virtual device e.g "aggregatordevice"
|Settings | 
|Channel Address | <sourceChannelId>:<aggregationType>[:<quality>]
|=========================================================

*Channel Address*

<sourceChannelId> - id of channel to be aggregated

<aggregationType> - 

* AVG: calculates the average of all values of interval (e.g. for average power)
* LAST: takes the last value of interval (e.g. for energy)
* DIFF: calculates difference of first and last value of interval
* PULS_ENERGY,<pulses per Wh>,<max counter>: calculates energy from pulses of interval (e.g. for pulse counter/meter). Example: PULSE_ENERGY,10,65535

<quality> - Range 0.0 - 1.0. Percentage of the expected valid/available logged records for aggregation. Default value is 1.0. Example: Aggregation of 5s values to 15min. The 15min interval consists of 180 5s values. If quality is 0.9 then at least 162 of 180 values must be valid/available for aggregation. NOTE: The missing/invalid values could appear as block at the beginning or end of the interval, which might be problematic for some aggregation types

Example: 

Channel A (channelA) is sampled and logged every 10 seconds.

[source,xml]
----
 <channelid="channelA">
   <samplingInterval>10s</samplingInterval>
   <loggingInterval>10s</loggingInterval>
 </channel>
----

Now you want a channel B (channelB) which contains the same values as channel A but in a 1 minute resolution by using the 'average' as aggregation type. You can achieve this by simply adding the aggregator driver to your channel config file and define a the channel B as follows:

[source,xml]
---- 
 <driver id="aggregator">
   <device id="aggregatordevice">
     <channelid="channelB">
       <channelAddress>channelA:avg</channelAddress>
       <samplingInterval>60s</samplingInterval>
       <loggingInterval>60s</loggingInterval>
     </channel>
   </device>
 </driver>
----

The new (aggregated) channel has the id channelB. The channel address consists of the channel id of the original channel and the aggregation type which is channelA:avg in this example. OpenMUC calls the read method of the aggregator every minute. The aggregator then gets all logged records from channelA of the last minute, calculates the average and sets this value for the record of channelB.
NOTE: It's recommended to specify the samplingTimeOffset for channelB. It should be between samplingIntervalB - samplingIntervalA and samplingIntervalB. In this example: 50 < offset < 60. This constraint ensures that values are AGGREGATED CORRECTLY. At hh:mm:55 the aggregator gets the logged values of channelA and at hh:mm:60 respectively hh:mm:00 the aggregated value is logged.

[source,xml]
----
 <driver id="aggregator">
   <device id="aggregatordevice">
     <channelid="channelB">
       <channelAddress>channelA:avg</channelAddress>
       <samplingInterval>60s</samplingInterval>
       <samplingTimeOffset>55s</samplingTimeOffset>
       <loggingInterval>60s</loggingInterval>
     </channel>
   </device>
 </driver>
----

