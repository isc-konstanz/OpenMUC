=== AMQP Logger

==== General Information

The logged OpenMUC-Records are send as JSON to a given AMQP-Broker.

[options="header", width="99%", cols="1,3,6"]
|===
2+|Parameter  | Description
2+|loggerId | amqplogger
3+a|<<anchor-channel-options, channel options>>
| | loggingEvent | supported
| | loggingSettings | amqplogger:queue=<your.queue>
|===


==== Configuration

You need the following AMQP specific properties for the configuration of the used Broker.
[source]
----
org.openmuc.framework.datalogger.amqp.host = localhost
org.openmuc.framework.datalogger.amqp.port = 5672
org.openmuc.framework.datalogger.amqp.ssl = false
org.openmuc.framework.datalogger.amqp.vhost = /
org.openmuc.framework.datalogger.amqp.username = guest
org.openmuc.framework.datalogger.amqp.password = guest

----
[#amqp-mapping]
==== Mapping to AMQP-Queues

Every OpenMUC-Channel will be mapped to an AMQP-Queue with the pattern <framework><separator><channelId> in your broker.
They are created automatically after starting OpenMUC. While the <channelId> is set in the channels.xml,
you have to define the name of your framework with the following property additionally.

[source]
----
# Set the unique identifier of this framework (this is also the exchange name)
org.openmuc.framework.datalogger.amqp.framework = openmuc
----

==== Serialisation

The serialisation is done by another OpenMUC-Bundle. Therefore you have to define which parser should be used. The
serialisation of an OpenMUC-Record to it's own JSON format is done with the usage of the default OpenMUC-Parser like in
the example. A custom parser can be used to serialize the record in a custom JSON format, by implementing the parser
interface from the OpenMUC-SPI project according to the Parser-OpenMUC project and use it's parser id for this property.

[source]
----
# Set the parser with which to serialize records
org.openmuc.framework.datalogger.amqp.parser = openmuc
----

