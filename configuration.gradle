project.ext {

  cfgVersion = "2.3.1"

  cfgGroup = "org.openmuc.framework"

  cfgCopyDependencies = false

  cfgCopyToRoot = true

  javaProjects = subprojects

  jarDefaultImportPackageVersion = ";version=0"

  distributionProjects = javaProjects.findAll {
    it.getPath() == ":openmuc-app-household" ||
    it.getPath() == ":openmuc-app-simpledemo" ||
    it.getPath() == ":openmuc-core-api" ||
    it.getPath() == ":openmuc-core-datamanager" ||
    it.getPath() == ":openmuc-core-spi" ||
    it.getPath() == ":openmuc-datalogger-ascii" ||
    it.getPath() == ":openmuc-datalogger-slotsdb" ||
    it.getPath() == ":openmuc-driver-aggregator" ||
    it.getPath() == ":openmuc-driver-csv" ||
    it.getPath() == ":openmuc-driver-dlms" ||
    it.getPath() == ":openmuc-driver-ehz" ||
    it.getPath() == ":openmuc-driver-iec60870" ||
    it.getPath() == ":openmuc-driver-iec61850" ||
    it.getPath() == ":openmuc-driver-iec62056p21" ||
    it.getPath() == ":openmuc-driver-knx" ||
    it.getPath() == ":openmuc-driver-mbus" ||
    it.getPath() == ":openmuc-driver-modbus" ||
    it.getPath() == ":openmuc-driver-rest" ||
    it.getPath() == ":openmuc-driver-rpi-gpio" ||
    it.getPath() == ":openmuc-driver-rpi-w1" ||
    it.getPath() == ":openmuc-driver-snmp" ||
    it.getPath() == ":openmuc-driver-wmbus" ||
    it.getPath() == ":openmuc-server-restws" ||
    it.getPath() == ":openmuc-server-modbus" ||
    it.getPath() == ":openmuc-webui-base" ||
    it.getPath() == ":openmuc-webui-channelaccesstool" ||
    it.getPath() == ":openmuc-webui-channelconfigurator" ||
    it.getPath() == ":openmuc-webui-dataexporter" ||
    it.getPath() == ":openmuc-webui-dataplotter" ||
    it.getPath() == ":openmuc-webui-mediaviewer" ||
    it.getPath() == ":openmuc-webui-spi" ||
    it.getPath() == ":openmuc-webui-userconfigurator"
  }

  docProjects = distributionProjects.findAll {
    it.getPath() == ":openmuc-core-api" ||
    it.getPath() == ":openmuc-core-spi" ||
    it.getPath() == ":openmuc-webui-spi"
  }

}

configure(javaProjects) {
  apply plugin: "java"
  apply plugin: "maven"


  uploadArchives {
    repositories {
      mavenDeployer {
        pom.project {
          licenses {
            license {
              name "GNU General Public License"
              url "http://www.gnu.org/copyleft/gpl-3.0.html"
              distribution "repo"
            }
          }
        }
      }
    }
  }

}

task bundles {
  apply from: "./conf/bundles.gradle"

  dependsOn(distributionProjects.install)
  dependsOn(updateBundles)
}

tasks.withType(Tar) {

  dependsOn(bundles)

  into(project.name) {

    from("./") {
      include "build.gradle"
      include "configuration.gradle"
      include "LICENSE**"
      include "gradle/wrapper/**"
      include "gradlew"
      include "gradlew.bat"
      include "build/libs-all/**"
      include "dependencies/**"
      include "src/**"

      include "bin/**"
      include "bundle-available/**"
      include "bundle-enabled/**"
      include "conf/**"
      include "lib/**"

      exclude "**/projects/**/bin"
      exclude "**/projects/**/build"
      exclude "**/projects/**/.settings"
      exclude "**/projects/**/.project"
      exclude "**/projects/**/.classpath"
      exclude "**/projects/**/.gradle"

      for (Project myproject: distributionProjects) {
        include myproject.getProjectDir().toString().substring((int)(getProjectDir().toString().size() + 1)) + "/**";
      }
    }

    if (name.equals("tar") ){
      exclude "**/dependencies/**/src"
    }

    from("./build/") {
      include "settings.gradle"
    }
  }

  into(project.name + "/doc/") {
    from("./build/docs/") {
      include "javadoc/**"
    }
  }
}
