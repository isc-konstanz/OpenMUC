buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'biz.aQute.bnd.builder' version '5.1.2'
    id 'org.asciidoctor.jvm.pdf' version '3.3.2' apply false
    id 'org.asciidoctor.jvm.convert' version '3.3.2' apply false
    id 'java-library'
    id 'jacoco'
    id 'org.sonarqube' version '3.0'
}

project.tasks["sonarqube"].dependsOn "test"
project.ext {
    jarDefaultImportPackageVersion = ";version=0"
}

repositories {
    mavenCentral()
}

apply from: "configuration.gradle"

def internalFolder = 'gradle/develop/'
def folder = new File(internalFolder)

if (folder.exists()) {
    apply from: internalFolder + "ascii.gradle"
    apply from: internalFolder + "jacoco.gradle"
    apply from: internalFolder + "extensions.gradle"
    apply from: internalFolder + "release.gradle"
}

configure(subprojects) {

    apply plugin: "java-library"
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "biz.aQute.bnd.builder"
    apply plugin: "jacoco"
    apply plugin: "maven-publish"

    group = cfgGroup
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"

    if (!project.properties.containsKey('cfgJavaVersion')) {
        project.ext {
            cfgJavaVersion = '1.11'
        }
    }
    repositories {
        mavenCentral()
    }

    compileJava {
        options.compilerArgs << '-Xlint:unchecked'
        options.compilerArgs << '-Xlint:deprecation'
    }

    sourceSets {
        sample
        itest {
            compileClasspath += sourceSets.main.runtimeClasspath
        }
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
        testImplementation 'org.mockito:mockito-core:2.21.0'

        implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.33'
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.10'
    }

    jar {
        bnd('Bundle-Name': project.name,
            'Bundle-Vendor': 'Fraunhofer ISE',
            'Bundle-SymbolicName': project.group + '.' + project.name)

        destinationDirectory = new File("$rootDir/build/libs")
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    eclipse.pathVariables([GRADLE_USER_HOME: file(gradle.gradleUserHomeDir)])
    tasks.eclipse.dependsOn(cleanEclipse)

    javadoc {
        exclude "**/internal/**"
        exclude "**/java-gen/**"
    }
}

configure(rootProject) {
    jar {
        // FIXME: Find better solution to avoid the root project beeing built
        destinationDirectory = new File("$rootDir/build/tmp/libs")
    }
}
